generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      String
  idNumber  String   @unique
  createdAt DateTime @default(now())
  filesUploaded File[] @relation("UploadedFiles") // Lists files uploaded by this user
}

model PreExistingIDs {
  id        String  @id @default(uuid())
  studentId String? 
  teacherId String? 
}

model File {
  id              Int      @id @default(autoincrement())
  fileName        String   // Original filename from upload
  filePath        String   // Full path to the locally stored ENCRYPTED file
  mimeType        String   // MIME type of the original file
  size            Int      // Original file size in bytes
  recipientEmail  String   // Email address of the intended recipient
  iv              String   // Initialization Vector used for AES-GCM (stored as hex)
  authTag         String   // Authentication Tag generated by AES-GCM (stored as hex) - ADDED
  downloadToken   String?   @unique // Secure, unique token for the download URL - ADDED
  tokenExpiresAt  DateTime?        // Expiry timestamp for the download token/link - ADDED
  createdAt       DateTime @default(now())
  uploaderId      String   // Foreign Key: MUST match the type of User 'id' (String or Int)
  uploader        User     @relation("UploadedFiles", fields: [uploaderId], references: [id])
}

